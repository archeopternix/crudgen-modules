{{define "handler" -}}
// Package view all view related structs and functions
// Generated code - do not modify it will be overwritten!!
// Time: {{.TimeStamp}}
package view

import (
	"github.com/labstack/echo/v4"
	"net/http"
	"fmt"
	model "{{.PackageName}}/model"
)

{{with .Entity}}


// List{{.Name | title | plural}} fetches all {{.Name | title | plural}} recordes from database and
// renders it with the '{{lowercase .Name}}list' template
func (s Server) List{{.Name | title | plural}}(c echo.Context) error {
	{{.Name | plural | lowercase}},err := s.Env.{{.Name  | title | plural}}.GetAll()
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name | title | plural}} not found")
	}
	
	data := struct {		
		Lookups map[string]model.Labels
		Records  model.{{.Name | title}}List
	}{}
	data.Records = {{.Name | plural | lowercase}}
	data.Lookups = make(map[string]model.Labels)
		
	{{- $name := .Name | title}}
	{{- range .Fields}}{{if eq .Kind "lookup" "child"}}
	data.Lookups["{{.Object | plural | title}}"], _ = s.Env.{{.Object | plural | title}}.GetLabels()	
	{{- end}}{{end}}
	
	p:=NewPage("{{.Name | plural | title}}", "{{.Name | plural | title}}")
	p.Data = data
	return c.Render(http.StatusOK, "{{lowercase .Name}}list", p)
}

// Get{{.Name | title}} gets one single record with 'id' from the database and  
// renders it with the '{{lowercase .Name}}detail' template
func (s Server) Get{{.Name | title}}(c echo.Context) error {
	id := c.Param("id")
	
	{{lowercase .Name}}, err := s.Env.{{.Name | plural | title}}.Get(asUint(id))
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name | title}} with id:"+id+" not found")
	}
	
	data := struct {		
		Lookups map[string]model.Labels
		{{- range .Fields}}{{if eq .Kind "parent" }}
		{{.Object | title}}Childs model.{{.Object | title}}List
		{{- end}}{{end}}
		Entity  *model.{{.Name | title}}
	}{}
	data.Entity = {{lowercase .Name}}
	data.Lookups = make(map[string]model.Labels)
	
	{{- $name := .Name | title}}
	// Child tables when available
	{{- range .Fields}}{{if eq .Kind "parent"}}
	data.{{.Object | title}}Childs = s.Env.{{$name | plural}}.GetAll{{.Object | plural | title}}ByParentID(asUint(id))
	{{- end}}{{end}}
	
	// Labels for 'Lookup' or 'Parent' tables
	{{- range .Fields}}{{if eq .Kind "lookup" "child"}}
	data.Lookups["{{.Object | plural | title}}"], _ = s.Env.{{.Object | plural | title}}.GetLabels()	
	{{- end}}{{end}}
	
	p:=NewPage("Edit {{.Name | title}}", "{{.Name | plural | title}}")
	p.Data = data

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// New{{.Name | title}} creates a new empty record and  
// renders it with the '{{lowercase .Name}}detail' template
func (s Server) New{{.Name | title}}(c echo.Context) error {
	{{lowercase .Name}} := new(model.{{.Name | title}})

	data := struct {		
		Lookups map[string]model.Labels
		{{- range .Fields}}{{if eq .Kind "parent" }}
		{{.Object | title}}Childs model.{{.Object | title}}List
		{{- end}}{{end}}
		Entity  *model.{{.Name | title}}
	}{}
	data.Entity = {{lowercase .Name}}
	data.Lookups = make(map[string]model.Labels)
	
	{{- $name := .Name | title}}
	{{- range .Fields}}{{if eq .Kind "lookup" "child"}}
	data.Lookups["{{.Object | plural | title}}"], _ = s.Env.{{.Object | plural | title}}.GetLabels()	
	{{- end}}{{end}}
	
	p:=NewPage("New {{.Name | title}}", "{{.Name | plural | title}}")
	p.Data = data

	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
}

// Create{{.Name | title}} creates a new record and prefills the record with the form fields
// saves it to the databse and returns to the list view
func (s Server) Create{{.Name | title}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new(model.{{.Name | title}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name | title}} could not bound to params")
  	}

	p:=NewPage("Error {{.Name | title}}", "{{.Name | plural | title}}")
	p.Data = {{lowercase .Name}}
	
	if s.validate{{.Name | title}}(p) == false {
    	return c.Render(http.StatusOK, "{{lowercase .Name}}detail", p)
  	}
	

	err = s.Env.{{.Name | plural | title}}.Insert({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name | title}} could not created")
	}
	
	return c.Redirect(http.StatusFound, "/{{.Name | plural | lowercase}}")
}

// Update{{.Name | title}} updates an existing record with values from the form fields
// saves it to the databse and returns to the list view
func (s Server) Update{{.Name | title}}(c echo.Context) (err error) {
	{{lowercase .Name}} := new(model.{{.Name | title}})
  	if err = c.Bind({{lowercase .Name}}); err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "{{.Name | title}} could not bound to params")
  	}

	err = s.Env.{{.Name | plural | title}}.Update({{lowercase .Name}})
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, "Database: {{.Name | title}} could not be updated")
	}

	return c.Redirect(http.StatusFound, "/{{.Name | plural | lowercase}}")
}

// Delete{{.Name | title}} deletes the record with id and
// returns to the list view
func (s Server) Delete{{.Name | title}}(c echo.Context) error {
	id := c.Param("id")
	
	
	{{- range .Fields}}{{if eq .Kind "parent"}}
	// one to many childs available do not delete
	{{.Object | lowercase}}Childs := s.Env.{{$name | plural}}.GetAll{{.Object | plural | title}}ByParentID(asUint(id))
	if len({{.Object | lowercase}}Childs)>0 {
		return echo.NewHTTPError(http.StatusPreconditionFailed, fmt.Sprintf("{{$name}} with id '%s' could not be deleted dependencies to {{.Object | plural | title}}", id))	
	}
	{{- end}}{{end}}

	err := s.Env.{{.Name | plural | title}}.Delete(asUint(id))
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound, fmt.Sprintf("{{.Name | title}} with id '%s' could not be deleted, %v", id, err))
	}
	
	return c.Redirect(http.StatusFound, "/{{.Name | plural | lowercase}}")
}

// generic validation handler for form
func (s Server) validate{{.Name | title}}(p *Page) bool{
	return true // ToDo: custom validation
	/*
	p.Errors = make(map[string]string)
	data := p.Data.(*{{.Name | title}})
	{{range .Fields}}
	{{- if eq .Kind "longtext" "email" "tel" "text" "password"}} if (data.{{.Name | title}} != "") {		
		p.Errors["{{.Name | title}}"]="Please correct error!"	
	}
	{{else if eq .Kind "boolean"}} if (data.{{.Name | title}} != true) {		
		p.Errors["{{.Name | title}}"]="Please correct error!"
	}
	{{end}}{{end}}
	return len(p.Errors) == 0
	*/
}
{{end}}
{{end}}